#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_WORD_LENGTH   20
#define MAX_LINE_LENGTH  100

// Structure Declaration
typedef struct {
    char *word;
    int occurrences;
} index_t;

// Function Prototypes
index_t *readFile(char *nameFile, int *num);
void searchOccurrence(index_t *index, int n);
int compare( char *src, char *dest);

// Main Program
int main() {
    index_t *index;
    int i, n;

    index = readFile("../input.txt", &n);
    searchOccurrence(index,n);

    for(i = 0; i < n ; i++){
        free(index[i].word);
    }
    free(index);
    return EXIT_SUCCESS;
}


// Function Declarations

index_t *readFile(char *nameFile, int *num){
    index_t *index;
    char str[MAX_WORD_LENGTH];
    FILE* fp;
    int i;

    fp = fopen(nameFile,"r");
    if(fp == NULL){
        fprintf(stderr,"Error opening file\n");
        exit(EXIT_FAILURE);
    }

    fscanf(fp,"%d", num);

    index = (index_t *) malloc ( (*num) * sizeof(index_t));
    if(index == NULL){
        fprintf(stderr,"Structure allocation failed\n");
        exit(EXIT_FAILURE);
    }

    for(i = 0; i < *num ; i++){
        fscanf(fp,"%s",str);
        index[i].word = (char *) malloc ((strlen(str)+1) * sizeof (char));
        if(index[i].word == NULL){
            fprintf(stderr,"Array allocation failed\n");
            exit(EXIT_FAILURE);
        }

        index[i].word = strdup(str);
        index[i].occurrences = 0;
    }

    fclose(fp);
    return index;
}

void searchOccurrence(index_t *index, int n){
    char str[MAX_WORD_LENGTH];
    int i, j;

    for(i=0;i<n;i++){
        strcpy(str,index[i].word);
        for(j=0;j<n;j++){
            if(compare(str,index[j].word)){
                index[i].occurrences++;
            }
        }
    }

    for(i = 0;i < n ; i++){
        fprintf(stdout,"%s = %d\n", index[i].word, index[i].occurrences);
    }
}

int compare(char *src, char *dest){
    int i;

    if(strlen(src) != strlen(dest)){
        return 0;
    }

    for(i = 0; i < strlen(src) ; i++){
        if(src[i] != dest[i]){
            return 0;
        }
    }

    return 1;
}
