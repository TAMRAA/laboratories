#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define length 100

typedef struct nodeT {
    char *word;
    int freq;
    struct nodeT *next;
} nodeT;

// Function Prototypes
nodeT *checkOccurrences(nodeT *head, char *buff);
nodeT *createList(char *fileName, nodeT *head);
void writeResult(char *nameFile, nodeT *head);
nodeT *findWord(nodeT *head, char *buff);
nodeT *push(nodeT *head, char *buff);
void disposeList(nodeT *head);
int stringCompare(const char *str1, const char *str2);
void cleanBuffer(char *word);



int main() {
    nodeT *head = NULL;
    head = createList("../input.txt", head);
    writeResult("../output.txt", head);
    disposeList(head);

    return EXIT_SUCCESS;
}

nodeT *createList(char *fileName, nodeT *head) {
    FILE *fp;
    char buffer[length];

    fp = fopen(fileName, "r");
    if (fp == NULL) {
        fprintf(stderr, "Error opening file\n");
        exit(EXIT_FAILURE);
    }

    while (fscanf(fp, "%s", buffer) != EOF) {
        cleanBuffer(buffer);
        head = checkOccurrences(head, buffer);
    }

    fclose(fp);
    return head;
}

void cleanBuffer(char *word) {
    int i, j, n;

    n = strlen(word);
    for (i = 0; i < n; i++) {
        word[i] = tolower(word[i]);
        if (!isalpha(word[i]) && !isdigit(word[i])) {
            for (j = i; j < n - 1; j++) {
                word[j] = word[j + 1];
            }
            i--; // Decrement i to recheck the current position
        }
    }
}

nodeT *checkOccurrences(nodeT *head, char *buff) {
    if (head == NULL) {
        head = push(head, buff);
    } else {
        head = findWord(head, buff);
    }
    return head;
}

nodeT *push(nodeT *head, char *buff) {
    nodeT *ptr = (nodeT *)malloc(sizeof(nodeT));
    if (ptr == NULL) {
        fprintf(stderr, "Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    ptr->word = strdup(buff);
    if (ptr->word == NULL) {
        fprintf(stderr, "Memory allocation failed");
        exit(EXIT_FAILURE);
    }

    ptr->freq = 1;
    ptr->next = head;
    head = ptr;

    return head;
}

nodeT *findWord(nodeT *head, char *buff) {
    nodeT *ptrT = head;

    while (ptrT != NULL) {
        if (stringCompare(ptrT->word, buff)) {
            ptrT->freq++;
            return head;
        }
        ptrT = ptrT->next;
    }

    // If the word is not found, push it to the list
    head = push(head, buff);
    return head;
}

int stringCompare(const char *str1, const char *str2) {
    return (strcmp(str1, str2) == 0);
}

void writeResult(char *nameFile, nodeT *head) {
    FILE *fp = fopen(nameFile, "w");
    if (fp == NULL) {
        fprintf(stderr, "Error opening file for writing\n");
        exit(EXIT_FAILURE);
    }

    while (head != NULL) {
        fprintf(fp, "%s : %d\n", head->word, head->freq);
        nodeT *temp = head;
        head = head->next;
        free(temp->word);
        free(temp);
    }

    fclose(fp);
}

void disposeList(nodeT *head) {
    while (head != NULL) {
        nodeT *temp = head;
        head = head->next;
        free(temp->word);
        free(temp);
    }
}
