#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 21

// Structure declarations
typedef struct Manufacturer {
    char *name;
    char *id;
    struct Product *products;
    struct Manufacturer *next;
} Manufacturer;


typedef struct Product {
    char *name;
    int price;
    struct Manufacturer *manufacturer;
    struct Product *next;
} Product;

// Function prototypes

Manufacturer *loadManufacturer(char *filename);
void loadProducts(Manufacturer *head, char *filename);
void printAll(Manufacturer *head);
void searchManufacturer(Manufacturer *head, char *name);
Manufacturer *searchManufacturerByID(Manufacturer *head, char *id);
void showByBudget(Manufacturer *head, int budget);
Product *addSorted(Product *head, Product *newProduct);
void destroy(Manufacturer *head);
void destroyProducts(Product *ptr);




// Main program
int main() {
    Manufacturer *head;
    char manufacturer[MAX];

    // Load manufacturers from the file
    head = loadManufacturer("../producer.txt");

    // Load products from the file
    loadProducts(head,"../product.txt");

    // Print a summary of loaded manufacturers and products
    printAll(head);

    // Check for the third parameter (budget)
    /*if (argc == 4) {
        int budget = atoi(argv[3]);
        // Display products within the specified budget
        showByBudget(head, budget);
    }*/

    // Interactive search by manufacturer name
    do {
        fprintf(stdout, "Manufacturer: ");
        scanf("%s", manufacturer);

        if (strcmp(manufacturer, "end") != 0) {
            searchManufacturer(head, manufacturer);
        }
    } while (strcmp(manufacturer, "end") != 0);

    // Cleanup: free allocated memory
    destroy(head);

    return EXIT_SUCCESS;
}


// FUNCTION DECLARATIONS


// Load manufacturers from a file and create a linked list
Manufacturer *loadManufacturer(char *filename) {
    Manufacturer *head, *manufacturer;
    FILE *file;
    char str1[MAX], str2[MAX];

    head = NULL;
    file = fopen(filename, "r");

    while (fscanf(file, "%s%s", str1, str2) != EOF) {
        // Create a new manufacturer node

        manufacturer = (struct Manufacturer *) malloc (sizeof(Manufacturer));
        if (manufacturer == NULL) {
            fprintf(stdout, "Allocation error.\n");
            exit(1);
        }

        // Store data
        manufacturer->name = strdup(str1);
        manufacturer->id = strdup(str2);
        manufacturer->products = NULL;
        manufacturer->next = head;
        head = manufacturer;

    }

    fclose(file);
    return head;
}

// Load products from a file and link them to their respective manufacturers
void loadProducts(Manufacturer *head, char *filename) {
    char str1[MAX], str2[MAX];
    int price;
    Product *product;
    Manufacturer *manufacturer;

    FILE *file = fopen(filename, "r");

    while (fscanf(file, "%s%s%d", str1, str2, &price) != EOF) {

        // Create a new product node
        product = (struct Product *) malloc (sizeof(Product));
        if (product == NULL) {
            fprintf(stdout, "Allocation error.\n");
            exit(EXIT_FAILURE);
        }

        // Store data
        product->name = strdup(str2);
        product->price = price;


        // Find the manufacturer node based on the ID
        manufacturer = searchManufacturerByID(head, str1);
        if (manufacturer != NULL) {

            // Link the product to the manufacturer
            product->next = manufacturer->products;
            manufacturer->products = product;
            product->manufacturer = manufacturer;
        } else {
            fprintf(stderr, "There is no such a brand ...  Rule-out model\n");
        }
    }

    fclose(file);
}


// Search for a manufacturer by ID and return the node
Manufacturer *searchManufacturerByID(Manufacturer *head, char *id) {

    Manufacturer *ptr = head;
    while (ptr != NULL) {
        if (strcmp(ptr->id, id) == 0){
            return ptr;
        }
        ptr = ptr->next;
    }
    return NULL;

}


// Display all manufacturers and their products
void printAll(Manufacturer *head) {
    Manufacturer *tmp1;
    Product *tmp2;

    tmp1 = head;
    while (tmp1 != NULL) {
        fprintf(stdout, "%s %s\n", tmp1->name, tmp1->id);
        tmp2 = tmp1->products;
        while (tmp2 != NULL) {
            fprintf(stdout, "  - %s %d\n", tmp2->name, tmp2->price);
            tmp2 = tmp2->next;
        }
        tmp1 = tmp1->next;
    }
}


// Search for a manufacturer by name and display its products
void searchManufacturer(Manufacturer *head, char *name) {
    Manufacturer *manufacturer;
    Product *product;

    manufacturer = head;
    while (manufacturer != NULL) {
        if (strcmp(manufacturer->name, name) == 0) {
            // Found the manufacturer, display its products
            product = manufacturer->products;
            while (product != NULL) {
                fprintf(stdout, "  - %s %d\n", product->name, product->price);
                product = product->next;
            }
            break;
        } else {
            manufacturer = manufacturer->next;
        }
    }
}

// Free allocated memory for manufacturers and products
void destroy(Manufacturer *head) {
    Manufacturer *tmp1a, *tmp1b;
    Product *tmp2a;

    tmp1a = head;
    while (tmp1a != NULL) {
        tmp2a = tmp1a->products;
        destroyProducts(tmp2a);
        tmp1b = tmp1a->next;
        free(tmp1a->name);
        free(tmp1a->id);
        free(tmp1a);
        tmp1a = tmp1b;
    }
}

// EXTRA CODES


// Display products within the specified budget
void showByBudget(Manufacturer *head, int money) {
    // Build a temporary list of products, ordered by price, selecting only those with price <= budget
    Product *list = NULL;
    Manufacturer *manufacturerPtr = head; // Manufacturer pointer
    Product *productPtr; // Product pointer
    while (manufacturerPtr != NULL) {
        productPtr = manufacturerPtr->products;
        while (productPtr != NULL) {
            if (productPtr->price <= money) {
                // Add to the list
                list = addSorted(list, productPtr);
            }
            productPtr = productPtr->next;
        }
        manufacturerPtr = manufacturerPtr->next;
    }

    // List has been filled, show it
    printf("List of products with price <= %d\n", money);
    productPtr = list;
    while (productPtr != NULL) {
        printf("%s %s %d\n", productPtr->manufacturer->name, productPtr->name, productPtr->price);
        productPtr = productPtr->next;
    }

    // Free the list
    destroyProducts(list);
}

// Insert a new product into a sorted linked list based on price
Product *addSorted(Product *head, Product *newProduct) {
    // Clone the newProduct element
    Product *newNode = (Product *)malloc(sizeof(Product));
    *newNode = *newProduct;
    newNode->next = NULL;

    if (head == NULL)
        return newNode;

    // Check against the first element
    if (newNode->price < head->price) {
        // Insert at head position
        newNode->next = head;
        head = newNode;
        return head;
    }

    // newProduct will not be the first element
    Product *ptr = head;
    while (ptr->next != NULL) {
        if (newNode->price < ptr->next->price) {
            // Insertion
            newNode->next = ptr->next;
            ptr->next = newNode;
            return head;
        }
        ptr = ptr->next;
    }

    // If we reach this point, the newProduct element has not yet been inserted
    ptr->next = newNode;

    return head;
}






// Free allocated memory for products
void destroyProducts(Product *ptr) {
    Product *next;
    while (ptr != NULL) {
        next = ptr->next;
        free(ptr->name);
        free(ptr);
        ptr = next;
    }
}
